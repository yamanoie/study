アップロード

ローカルで開発したイメージをステージングや本番環境で動かすにはDockerレジストリにアップロードする必要がある。
DockerレジストリはDocker Image を保存するための場所で、Docker版のGitHubのようなもの。

クラウドの場合

AWSの場合"Elastic Container Registry"というDockerレジストリサービスが存在する。
クラウド上に本番環境を構築する場合は構築するクラウドで提供されているDockerレジストリサービスを使うのが良い。


１、ログイン

$ docker login

Docker Hubへログイン
name passwordを打つ






２、 Docker Image の命名

Docker Hub にアップロードするためにはDocker Hub のDocker Image の命名規則に則る必要がある。
ユーザーのオリジナルイメージは <USER NAME>/<IMAGE NAME>:<TAG> という命名にする。( :<TAG> は省略可能で、省略すると :latest と命名される)
<USER NAME> は自分のユーザー名を入力。


$ docker tag hello <USER NAME>/hello




３、アップロード

$ docker push <USER NAME>/hello


The push refers to repository [docker.io/<USER NAME>/hello]
b57c79f4a9f3: Mounted from library/ubuntu
d60e01b37e74: Mounted from library/ubuntu
e45cfbc98a50: Mounted from library/ubuntu
762d8e1a6054: Mounted from library/ubuntu
latest: digest: sha256:99aab145aaa0bf0e51a2ab995e0051b1756e1016cbc7d82bcee663c79f56b5c3 size: 1150




４,実行中のコンテナの削除


$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
429c028bcf74        ubuntu              "echo hoge"         16 seconds ago      Exited (0) 15 seconds ago                       stoic_greider


$ docker container prune
WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y
Deleted



ローカルのイメージの削除


$ docker image prune -a
WARNING! This will remove all images without at least one container associated to them.
Are you sure you want to continue? [y/N] y
Deleted Images:


５、Docker Hub から作成したイメージの取得


$ docker pull <USER NAME>/hello
Using default tag: latest
latest: Pulling from <USER NAME>/hello
898c46f3b1a1: Pull complete
63366dfa0a50: Pull complete
041d4cd74a92: Pull complete
6e1bee0f8701: Pull complete
Digest: sha256:99aab145aaa0bf0e51a2ab995e0051b1756e1016cbc7d82bcee663c79f56b5c3
Status: Downloaded newer image for <USER NAME>/hello:latest



６、基本的なコマンド



FROM

ベースとなるDocker Image を指定。
DockerはベースとなるDocker Image の上に COPY や RUN のようなコマンドを重ねてDocker Image を作成。
ベースとなるDocker Image は公式で提供されているImageを使用するのが一般的。
また、ここで設定したイメージを「ベースイメージ」と呼ぶ。


例　　FROM node




ENV

Docker内で使用する環境変数を定義。
NODE_ENV のようなDockerの起動時にデフォルトで定義されていてほしい環境変数を定義すると良い。


例　　　ENV NODE_ENV=production



WORKDIR

Dockerfileでコマンドを実行する際に基準となるディレクトリを設定。
このとき存在しないディレクトリを指定すると自動的にディレクトリが作成されます。
デフォルトだと / が設定されているため、最悪の場合既存のディレクトリを上書きしてしまいコンテナが起動しなくなる。


例　　WORKDIR /scripts


COPY

Docker内へホストのファイル/ディレクトリをコピーする。
COPY は基本的に2つの引数を設定。1つ目はホスト側のディレクトリ、2つ目はDocker側のディレクトリ。
ホスト側のディレクトリは docker build . で指定したディレクトリです。この場合 . を指定しており、カレントディレクトリが参照される。
Docker側は WORKDIR で定義されたディレクトリを参照します。


例　　　COPY . .


RUN

Docker内でコマンドを実行。
ここでコンテナへ依存するライブラリやパッケージのインストールやユーザーの設定などの処理を実行する。

　例　　RUN npm install \
	  && groupadd app \
	  && useradd -g app app \
	  && chown -R app:app /scripts



USER

作成したDocker Image を起動時にログインするユーザーを指定。
デフォルトは root が設定されているため、セキュリティリスクを回避するために別のユーザーを指定するのが良い。


例　　USER app




CMD

Docker起動時にデフォルトで実行されるコマンドを定義。
Dockerはここで設定したコマンドがフォアグラウンドで実行されている間が生存期間になる。
そのため、プロセスの処理が走っている間はフォアグラウンドで実行するように記述(バックグラウンドで起動するとDockerが終了してしまう)。


例　CMD ["npm", "run", "start"]