概要

１、dockerとは・・・・

コンテナ型の仮想化環境を提供するオープンソースソフトウェア
特定の環境をパッケージングし、どの環境でも動くポータビリティを保証

メリット

アプリケーションの実行環境構築を簡単に出来る
実行環境をテキストファイルとして共有できる
ホストOSに直接アクセスするので、オーバーヘッド(処理を行うための手続き)が少なくなる
デプロイやビルドが容易になる
チーム開発においてDockerを使えば、開発環境を同じ状態でスタートすることが可能
ディスク使用量は少なく、仮想環境 (インスタンス) 作成や起動は速く、性能劣化がほとんどない


コンテナ（インスタンスのようなもの）
イメージ（クラスのようなもの、nginx,mysql,rubyなど）
ホストOS

イメージからコンテナを作成することを　　ビルド　という


dockerhubからイメージをpullして取得できる
pullしたいイメージがなければ自分で作ることができる　→ dockerfile
作成したdockerfileはイメージとして配布することもできる


docker compose

コンテナを一元管理



２、スナップショット

Dockerは任意のタイミングの状態（ライブラリ・ランタイム・コード）を1つのスナップショットとして保存する。
スナップショットは任意のタイミングの状態を再現することが可能で、そしてそのスナップショットを他の開発者やステージングや本番環境へ配布することが可能です。


３、Immutable Infrastructure

インフラを不変なものとして扱うアプローチ
変更や追加などの変更が発生する場合は新しく構築してスナップショットを保存し、そのスナップショットを元にサーバーを新しく立ち上げる。
このアプローチにより、確実に動作するスナップショットを手に入れることができる。



４、dockerfile

Infrastructure as Codeとしての機能。
Infrastructure as Codeはインフラの構成をコードに落とし込み宣言的に環境を構築する手法。
コードベースでインフラ環境を定義するためのアプローチ。



５、Image

特定の時点のスナップショットとしての機能を提供する。
Dockerfileで定義・構築された環境をスナップショットとして保存する。



６、VirtualMachine(VM)

ハードウェアから上、ハードウェア・カーネル(OS)・ユーザースペースの低レイヤーから仮想化を行うための技術。
例えばmacOS上でWindowsを動かしたりできる。
VMは コンピュータ自体 を仮想化するのに対して、Dockerは プロセス の仮想化を行う。


７、cgroup
メモリ・CPUのような「計算リソース」を隔離するための機能で、コンテナへリソースの割り当てと制限を行う。
コンテナはそれぞれ専用の計算リソースを割り当て、他のコンテナにはお互いにアクセスできないようにする。
そして割り当てられたリソースを消費しても他のコンテナに影響を及ぼさないように制限を行う。

８、namespace
隔離のための技術。
namespaceはプロセスやネットワーク、ファイルアクセスなど復数の種類があり、それぞれが異なるリソースの隔離を行います。

９、Capability
スーパーユーザーとしての機能を制限するための機能。
DockerコンテナへHostOSのrootユーザーの権限を制限し、最小限の権限を付与/管理を行う。


１０、ホストOS

Windows Mac


１１、dockerエンジン

dockerそのもの
インストールしたホストマシン上でdockerエンジンが動き、さらにその上でコンテナが動いている。
