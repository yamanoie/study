概要

１、dockerとは・・・・

コンテナ型の仮想化環境を提供するオープンソースソフトウェア
特定の環境をパッケージングし、どの環境でも動くポータビリティを保証

メリット

アプリケーションの実行環境構築を簡単に出来る
実行環境をテキストファイルとして共有できる
ホストOSに直接アクセスするので、オーバーヘッド(処理を行うための手続き)が少なくなる
デプロイやビルドが容易になる
チーム開発においてDockerを使えば、開発環境を同じ状態でスタートすることが可能
ディスク使用量は少なく、仮想環境 (インスタンス) 作成や起動は速く、性能劣化がほとんどない


コンテナ（インスタンスのようなもの）
イメージ（クラスのようなもの、nginx,mysql,rubyなど）
ホストOS

イメージからコンテナを作成することを　　ビルド　という


dockerhubからイメージをpullして取得できる
pullしたいイメージがなければ自分で作ることができる　→ dockerfile
作成したdockerfileはイメージとして配布することもできる



＃従来の仮想化

ホストOS 仮想化ソフトウェア　ゲストOS プロセス

＃コンテナ

ホストOS （コンテナで区切られた）プロセス

コンテナの場合には、仮想化ソフトウェアもゲストOSもないので、高速にプロセスを起動出来る。

コンテナ内のプロセスは、ホスト内のOSを使う。ホスト内のOSのカーネルを使う。


＃基本的な流れ


１、まず、dockerpullコマンドによって、DockerHubからコンテナのイメージというものをダウンロード。このイメージはOSのファイルです(/binや/libなど)。
２、docker runコマンドで、イメージを元にコンテナを作成及びプロセスを起動。このときコンテナ上でプロセスが生成。
３、dockerstopコマンドで、2で起動したコンテナを停止。この状態では、コンテナは停止しプロセスも動いていない。完全に寝ている状態。
４、docker startコマンドで3で停止したコンテナを再開。
５、docker　commitコマンドで、コンテナをDockerイメージ化。永続化したい場合はdockercommitコマンドでイメージ化すればOK。
６、docker　pushコマンドで、Dockerリポジトリにイメージをアップロード。こうすると、イメージを他のPCでも使うことができる。





２、スナップショット

Dockerは任意のタイミングの状態（ライブラリ・ランタイム・コード）を1つのスナップショットとして保存する。
スナップショットは任意のタイミングの状態を再現することが可能で、そしてそのスナップショットを他の開発者やステージングや本番環境へ配布することが可能です。


３、Immutable Infrastructure

インフラを不変なものとして扱うアプローチ
変更や追加などの変更が発生する場合は新しく構築してスナップショットを保存し、そのスナップショットを元にサーバーを新しく立ち上げる。
このアプローチにより、確実に動作するスナップショットを手に入れることができる。



４、dockerfile

Infrastructure as Codeとしての機能。
Infrastructure as Codeはインフラの構成をコードに落とし込み宣言的に環境を構築する手法。
コードベースでインフラ環境を定義するためのアプローチ。
DockerHubダウンロードしたimage （CentOS7）などは、OSの動作に必要な最低限のものしか入ってない。「Dockerfile」というものにモロモロ書く。



５、Image

特定の時点のスナップショットとしての機能を提供する。
Dockerfileで定義・構築された環境をスナップショットとして保存する。



６、VirtualMachine(VM)

ハードウェアから上、ハードウェア・カーネル(OS)・ユーザースペースの低レイヤーから仮想化を行うための技術。
例えばmacOS上でWindowsを動かしたりできる。
VMは コンピュータ自体 を仮想化するのに対して、Dockerは プロセス の仮想化を行う。

=========Linuxの機能=========

dockerではコンテナを実現するために以下のLinuxの機能を利用する。

７、cgroup
メモリ・CPUのような「計算リソース」を隔離するための機能で、コンテナへリソースの割り当てと制限を行う。
コンテナはそれぞれ専用の計算リソースを割り当て、他のコンテナにはお互いにアクセスできないようにする。
そして割り当てられたリソースを消費しても他のコンテナに影響を及ぼさないように制限を行う。

８、namespace
隔離のための技術。
namespaceはプロセスやネットワーク、ファイルアクセスなど復数の種類があり、それぞれが異なるリソースの隔離を行う。
本来アプリはOS上で動くものなので、同じパス・ファイル名を取ることも出来ないですし、同じUIDを取ることも出来ない。
namespaceで区切られた部分がコンテナ。

９、Capability
スーパーユーザーとしての機能を制限するための機能。
DockerコンテナへHostOSのrootユーザーの権限を制限し、最小限の権限を付与/管理を行う。


=============================

１０、ホストOS

Windows Mac

============Docker純正ツール===========


１１、dockerエンジン

dockerそのもの
インストールしたホストマシン上でdockerエンジンが動き、さらにその上でコンテナが動いている。


１２、Docker Hub

Dockerイメージを集めたサイト。OS、アプリケーションのイメージが多く公開されており、誰でも自由に利用できる。



１３、　Kitematic

GUI操作でDockerが利用できるツール


１４、Docker Machine

DockerはLinux固有の技術を利用しているため、Mac OS XやWindowsといった環境ではそのままでは利用できない。Docker Machineは、このような非Linux環境でDockerを利用するための支援ツール。

docker-machineコマンドを使ってDockerを実行させるサーバーや仮想マシンといったホスト（Dockerホスト）の管理を行える。具体的には、仮想マシンやサーバーインスタンスの作成・削除および起動・停止、OSやDockerといった必要なソフトウェアのインストールといった作業が可能。

$docker-machine create --driver virtualbox ＜Dockerホスト名＞

docker-machineコマンドを実行するだけでDockerがインストールされた仮想マシンの作成と起動を行える。



１５、Docker Swarm

コンテナを複数ホストにまたがって管理するための機能
クラスタ管理機能
複数台のマシンをネットワーク接続し、一つのまとまりとして管理する機能。

オーケストレーション機能
複数マシンを自動で管理する機能


１６、 Docker Compose



１７、プライベートリポジトリ

カスタマイズしたコンテナを社内だけで限定公開したいときなどに活用。
docker pushコマンドでプライベートリポジトリにアップロード。
プライベートリポジトリにアップロードされたイメージを開発者みんなで共有して、開発者のPCにコンテナを作成することが出来る。