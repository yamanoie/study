dockerfile

Docker Image は Dockerfile というファイルを記述し、そのファイルを元にビルドすることでスナップショットの作成ができる。
オリジナルのdocker imageを作ることができる。
構築手順をコードとしてファイルに残せる　＝＞　Infrastructure as Code

Dockerfile の編集

Dockerfileは独自のDSLで記述。
Dockerfileは「 ubuntu というDocker Imageをもとに、ホストの hello.txt をコンテナの /tmp/hello.txt へコピーして、 cat /tmp/hello.txt コマンドを実行」という意味。



$ vi Dockerfile


FROM ubuntu

COPY hello.txt /tmp/hello.txt

CMD ["cat", "/tmp/hello.txt"]






$ docker build -t hello .

docker build コマンドで Dockerfile からDocker Image を作成。
-t hello オプションは「Docker Imageを hello という名前にする」という意味。
. はdocker build 実行時のコンテキストの指定。 . は COPY コマンドを実行する際にどのディレクトリを起点とするかを指定。





$ docker images

現在ローカルに存在するDocker Image の一覧を確認することができる。


$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               latest              59e1a587fe86        13 seconds ago      88.9MB
ubuntu              latest              94e814e2efa8        6 days ago          88.9MB
node                latest              9ff38e3a6d9d        10 days ago         904MB



基本的なコマンド



FROM

ベースとなるDocker Image を指定。
DockerはベースとなるDocker Image の上に COPY や RUN のようなコマンドを重ねてDocker Image を作成。
ベースとなるDocker Image は公式で提供されているImageを使用するのが一般的。
また、ここで設定したイメージを「ベースイメージ」と呼ぶ。
ここで指定されたイメージが「Docker Hub」にあるかを検索し、存在すれば自動でダウンロードするようになっている。



例　　FROM node




ENV

Docker内で使用する環境変数を定義。
NODE_ENV のようなDockerの起動時にデフォルトで定義されていてほしい環境変数を定義すると良い。


例　　　ENV NODE_ENV=production



WORKDIR

Dockerfileでコマンドを実行する際に基準となるディレクトリを設定。
このとき存在しないディレクトリを指定すると自動的にディレクトリが作成されます。
デフォルトだと / が設定されているため、最悪の場合既存のディレクトリを上書きしてしまいコンテナが起動しなくなる。


例　　WORKDIR /scripts


COPY

Docker内へホストのファイル/ディレクトリをコピーする。
COPY は基本的に2つの引数を設定。1つ目はホスト側のディレクトリ、2つ目はDocker側のディレクトリ。
ホスト側のディレクトリは docker build . で指定したディレクトリです。この場合 . を指定しており、カレントディレクトリが参照される。
Docker側は WORKDIR で定義されたディレクトリを参照します。


例　　　COPY . .


RUN

Docker内でコマンドを実行。
ここでコンテナへ依存するライブラリやパッケージのインストールやユーザーの設定などの処理を実行する。
「yum」や「apt」などのコマンドを実行する際は、この「RUN」をメインに使う。

　例　　RUN npm install \
	  && groupadd app \
	  && useradd -g app app \
	  && chown -R app:app /scripts




USER

作成したDocker Image を起動時にログインするユーザーを指定。
デフォルトは root が設定されているため、セキュリティリスクを回避するために別のユーザーを指定するのが良い。


例　　USER app




CMD

Docker起動時にデフォルトで実行されるコマンドを定義。
Dockerはここで設定したコマンドがフォアグラウンドで実行されている間が生存期間になる。
そのため、プロセスの処理が走っている間はフォアグラウンドで実行するように記述(バックグラウンドで起動するとDockerが終了してしまう)。


例　CMD ["npm", "run", "start"]