docker compose

複数のdockerコンテナからなるアプリを定義し、操作するためのツール
imageの作成方法やコンテナ起動時などを　docker-compose.ymlに記述することで、
docker composeコマンドでまとめて操作できる。


メリット

・コンテナ間の通信ができる（networkを作成しなくていい）→自動で　ディレクトリ名_default　というネットワークを作成する
・インフラ構成の可視化、バージョン管理が可能
・docker build(imageを作成する)やdocker run（コンテナを起動）をコンテナの数だけしなくて済む。

＊docker run や docker buildの代わりに docker-compose.ymlとdockerfileを使う





＃docker-composeを使わない場合

例）　WordPressとMySQLのコンテナを立ち上げて、WordPressからMySQLにアクセスできるような環境。



１、Dockerのネットワークの作成


$ docker network create wp-network


２、　Mysqlのコンテナ作成

$ docker run -d --name mysql \
--network wp-network \
-e MYSQL_ROOT_PASSWORD=wordpress \
-e MYSQL_DATABASE=wordpress \
-e MYSQL_USER=wordpress \
-e MYSQL_PASSWORD=wordpress \

mysqlという名前のコンテナを作成し、デーモンで起動。



３、　WordPressのコンテナ作成

$ docker run -d --name wordpress \
-p 80:80 \
-e WORDPRESS_DB_HOST=mysql:3306 \
-e WORDPRESS_DB_NAME=wordpress \
-e WORDPRESS_DB_USER=wordpress \
-e WORDPRESS_DB_PASSWORD=wordpress \

wordpressという名前のコンテナを作成し、デーモンで起動








＃dockerーcomposeを使う場合


１、docker-compose.ymlを作成


docker-compose.yml

version: '3'

services:
   mysql:
     image: mysql:8.0.20
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: wordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - mysql
     image: wordpress:php7.4-apache
     ports:
       - "80:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: mysql:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress




1, docker-compose.yml


key:valueの関係になっている。


サンプル

version: '2'
services:
  app:
    build: rails
    environment:
      APP_DATABASE_HOST: db
      APP_DATABASE: app_development
      APP_DATABASE_USER: root
      APP_DATABASE_PASSWORD: root
    depends_on:
      - db
  db:
    build: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
  web:
    build: nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/log:/var/log/nginx
    volumes_from:
      - app
    depends_on:
      - app



２、以下のコマンドを実行

$ docker-compose up -d






# version

docker composeのバージョン
３まである　*3だと voulums_fromが使えない


# services

アプリケーションを構成するためのサービス設定。
サービス＝コンテナと考えて良い。
app,db,webの３つ
これらのサービスごとにビルドされ、各設定にしたがってコンテナが作成され起動する。


# build

dockerfileの場所を指定する。


docker
├── docker-compose.yml
├── rails
│   └── Dockerfile
├── mysql
│   └── Dockerfile
└── nginx
    └── Dockerfile


# environment

コンテナ内で利用する環境変数を設定。

# context

contextはDockerfileのあるディレクトリを表す。

# restart

これをalwaysにするとホストOSやDockerデーモン起動時にコンテナが自動的に起動。PCを立ち上げたらコンテナも合わせて起動したいときに便利

# depends_on

サービス同士の依存関係を設定。
この設定でコンテナの起動タイミングが変わる。


depends_on:
      - db

この場合、dbサービスが起動した後にappサービスが起動するようになる。


# ports

ホストマシンとゲストマシンのポートフォワードを設定。

ports:
　　　　 - "80:80"

localhostの80番ポートあての通信をコンテナの80番ポートに転送する設定


#image

WordPressの公式イメージを取得する定義

# volumes

コンテナのデータを永続化する
マウント（利用できるように認識させる）するための設定

volumes:
      - ./nginx/log:/var/log/nginx

この場合、ホストマシンの指定されたディレクトリにコンテナ内のNginxのログファイルをマウントしている。
これでコンテナを停止してもホストマシンからログを確認できるようになる。


# volumes_from

コンテナ間でマウントするための設定。

app:
volumes_from:
      - app

この場合、appサービスのコンテナをwebサービスのコンテナにマウントするようにしている。








2, docker-compose


docker-compose.ymlをつかってコンテナ間で通信する。




docker
├── docker-compose.yml
├── rails
│   ├── Dockerfile
│   ├── Gemfile
│   ├── Gemfile.lock
│   └── config
│       ├── database.yml
│       └── puma.rb
├── mysql
│   ├── Dockerfile
│   └── app.cnf
└── nginx
    ├── Dockerfile
    └── nginx.conf




＃ コマンド


$ docker-compose up

作成した設定ファイルに基づいて、コンテナを起動

$ docker-compose stop

コンテナの停止
