devise

ユーザーログイン周りの機能を追加するgem

bundle installすると、
routes.rbにdevise_for :usersが追記
この記述によりサインアップや、ログインなど認証のためのルーティングが自動で作成される。



＃　ヘルパーメソッド


current_user
現在ログインしているユーザーのレコードを取得。
現在ログインしているユーザーのidを取得する際はcurrent_user.idで取得できる。

user_signed_in?
ユーザーがサインしていればtrueが、サインアウトしていればflaseが返ってくるメソッド。
ビューでcurrrent_userを使う際、ログインしていない場合、エラーになってしまうので、このメソッドで条件分岐をする必要がある。

authenticate_user!
before_action :authenticate_user!みたいにbefore_actionと併用して使う。
この一文をコントローラーの最初に記述しておくことにより、ユーザがログインしていない場合はログインページにリダイレクトさせる。
投稿はログインしていないとできないようにする際などに使用。
onlyやexceptでアクションを設定することが多い。

configure_permitted_parameters
作成したモデルにストロングパラメーターを追加したい場合に使用します。
デフォルトだとメールアドレスとパスワードのみストロングパラメーターがかかっている。
使用する際はapplication_controller.rbにbefore_actionを使って記述。









＃モジュール



database_authenticatable
サインイン時にユーザーの正当性を検証するためにパスワードを暗号化してDBに登録。認証方法としてはPOSTリクエストかHTTP Basic認証が使える。


registerable
登録処理を通してユーザーをサインアップする。また、ユーザーに自身のアカウントを編集したり削除することを許可する。


recoverable
パスワードをリセットし、それを通知。


rememberable	保存されたcookieから、ユーザーを記憶するためのトークンを生成・削除。


trackable	サインイン回数や、サインイン時間、IPアドレスを記録。


validatable	Emailやパスワードのバリデーションを提供。独自に定義したバリデーションを追加することもできる。


confirmable	メールに記載されているURLをクリックして本登録を完了する、といったよくある登録方式を提供。また、サインイン中にアカウントが認証済みかどうかを検証。


lockable
一定回数サインインを失敗するとアカウントをロック。ロック解除にはメールによる解除か、一定時間経つと解除するといった方法がある。


timeoutable
一定時間活動していないアカウントのセッションを破棄。


omniauthable	intridea/omniauthをサポート。TwitterやFacebookなどの認証を追加したい場合はこれを使用。