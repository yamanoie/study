XSS

XSS (cross site scripting)
ユーザー（被害者）の Web ブラウザで任意の JavaScript を実行させることを許す脆弱性または攻撃手法
Cookie や機密情報抜かれたり、偽情報を表示して社会的信用を落とされたりとかする。

＃流れ

１、攻撃者が脆弱性のある Web アプリケーションを見つける。
２、不正なスクリプトを含んだ罠を用意する。
３、罠に誘導するための URL をユーザー（被害者）に SNS / メールなどで配る。
４、罠にかかったユーザーが URL にアクセスし、脆弱性のある Web アプリケーションにアクセスする。
５、Web アプリケーションから不正なスクリプトを含んだ Web ページが返される。
６、ユーザーの Web ブラウザで不正なスクリプトが実行される。


＃XSS を防ぐには

HTML 生成時に特殊文字をエスケープしないことが XSS を実現させてしまう一因とる。
例えば、入力フォームに検索条件を入力して、サーバーから返された検索結果を表示するようなサービスの場合、< や > をエスケープせずにそのまま入力できるようにしてしまうと、<form method="POST" ...>みたいな感じで入力情報を別のサーバーに飛ばすフォームをブラウザにレンダリングさせることができる。

もしフォームなどでユーザーが文字を送信するといった場合に、ユーザーが内部のプログラミング上にコードを入力することが出来てしまうといった危険性がある。


エスケープ処理とは、、、
文字列の処理のこと

>	&lt
<	&gt
"	&quot
'	&#039







CSRF　(cross-site request forgeries)

正規ユーザを誘導し、強制的に特定の処理を実行させるってあまり聞攻撃を許す脆弱性または攻撃手法。
forgeries/forgery ＝　偽造 (サイトをまたがってリクエストを偽造する )



＃ CSRF を実現する手順


どうやって強制的に特定の処理を実行させているかというと、

１、ユーザーが特定の Web サービスにログインする
２、攻撃者が用意した罠ページにユーザーがアクセスしてしまう
３、罠ページから攻撃コードが Web サービスに送られてしまう
４、ユーザーはログインが完了しているので、Web サービスにリクエストが届いてしまう
５、強制的に実行させる特定の処理と言っているのは、例えば通販サイトであれば 商品の不正な購入 であったり、掲示板サービスだったら不正な書き込みさせると言ったこと。






# CSRF を防ぐには

CSRF は正常にログインしているのでサーバーでは不正なリクエストかどうかの判定が難しいところを突いてきている手法だと言える。
対策としては コメント投稿、商品購入、退会といった副作用が発生する画面の実行時に、想定通りの画面遷移が行われたかどうかを確認するなどして、セッションの管理を不備なく行うことが大切。
また、事前にユーザーにサーバーからトークンを渡しておいて、副作用が発生する画面の実行時にトークンが正しいか確認するということも有効。




まとめ


XSS
不正なスクリプトが実行されるのはユーザーの Web ブラウザ
受ける被害は機密情報を抜かれる、偽情報が表示され社会的信用を落とされるなど
対策として HTML の特殊文字のエスケープが有効


CSRF
不正なスクリプトが実行されるのは Web サーバ
受ける被害は通販サイトであれば商品の不正な購入、掲示板サービスだったら不正な書き込みなど
対策として、副作用が発生する画面の実行時に、想定通りの画面遷移が行われたかどうかを確認する。または、事前に渡したトークンが正しいものであるかをチェックするということが有効
編集リクエスト