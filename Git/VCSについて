VCSについて



ヴァージョン管理システム／Version Control System



1. 履歴を残す

誰が」「いつ」「何を」したかが残る
その時点の状態を再現することも可能
過去の状態を再現した上で、そこから別の変更を加えることで、履歴を分岐する（複数のアプローチにより、作業を行うことができる）


2. 作業の競合を防ぐ

誰かが先に変更していればそのことを検知し、VCSが競合箇所を知らせてくれる。




コミットのルール


・「時間」ではなく「作業」の単位で行う
・「どのように」ではなく、その作業を「何故」「何を」「何のために」行うかをメッセージに残す
・動かない成果物はリポジトリに反映しない
・一度に一つの変更だけ反映する



ダメな例



1. 「とりあえず」反映している

"昼休み前のコミット"

作業の区切り ではなく、「帰る前」、「休憩前」といった 時間の区切り で、リポジトリに反映している


2. 「どうやったのか」をメッセージに書いている

"hoge.csファイルにdoFugaメソッドを追加"

何故変更したか、「何のために」変更したかについてを記述する


3. 動かないものも反映している

"コンパイル失敗するけど、原因が分からないので一応コミット"

「動かない」ものが成果物として管理されてしまう


4. 複数の変更を盛り込んでいる

"○○機能に△△処理と××処理を追加した。ついでに□□のバグを修正"

「複数の変更」を一度に反映していると、その履歴で行われたファイルの変更が、「どの」変更によるものなのかが分からなくなってしまう。

