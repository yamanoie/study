仮想環境

#インターネット上にサービスを公開するために

インターネット上にそれらのサービスを公開し、ブラウザ経由で誰もがアクセスできるようにするためには、インターネットに接続されたコンピュータ、つまりサーバーが必要。
サーバーはレンタルサーバーやVPS, クラウドなどいくつかの種類がありますが、多くの場合はLinuxというOSにより動作している。
しかし、多くの方はWindowsかMacいずれかのPCを使用しており、これらはそれぞれWindows, OSXといったOSを搭載しています。
もちろんそういった環境で開発をすることはできますが、結局サービスを公開するにはLinuxで動作するサーバーに、プログラムが記述されたファイル群をアップロードしなければならない。
そして、WindowsやOSX上で正しく動作したからといって、Linux上でも正しく動作するとは限らない。
そのため、開発する環境（自分のPC）と、公開する環境（サーバー）のOSを揃える必要がある。


＃仮想環境

WindowsやMacを使用している人でも、同一PC内にLinuxで動作するコンピュータを持つことができる。
一般的に仮想環境をつくる土台となるOSを「ホストOS」、仮想環境上のOSを「ゲストOS」と呼ぶ。仮想環境を構築することで、Linux用のパソコンとWindows用のパソコンをそれぞれ用意する必要がなくなり、一つのハードウェアで一元管理できるようになる。
メモリやハードディスク容量など、柔軟で簡単に調整ができるメリットも



＃３種類の仮想マシン

・ホスト型

パソコンやサーバにホストOSをインストールし、そのOS上に仮想環境作成ソフトウェアをインストールして構築するタイプ。ホストOSの上にゲストOSが並ぶ。

既存のサーバなどにインストールすればすぐに利用でき、手軽に始められる。ホスト型のデメリットは、ホストOSを起動しなければならない点。ハードウェアを起動した際に、ホストOSが立ち上がるまで時間がかかる。

代表なソフト
VMware Player,virtual box



・ハイパーバイザー型

一つのハードウェアに「ハイパーバイザー」と呼ばれる仮想化ソフトウェアを直接インストールし、仮想化を構築するタイプ。ホストOSを起動しなくてよいので、ホストOS型と比べて早く起動できます。

ハイパーバイザーの代表的なソフトは、VMware ESXやHyper-V、Citrix XenServerなど

ホストOSがないため、リソースのほとんどを仮想環境に充てられる。一方、ハイパーバイザー型のデメリットとして、既存のパソコンやサーバを使い回せず、新しくハードウェアを購入しなくてはいけない。


・コンテナ型

ホストOSに「コンテナエンジン」とよばれる仮想化ソフトウェアをインストールし、その中でコンテナと呼ばれる環境を作り、アプリケーションを実行。代表的なコンテナエンジンソフトウェアは、Docker。

コンテナにはゲストOSという概念はない。ホストOSからは、一つのプロセスとして認識される。そのため、余分なリソースが不要であり、軽快な環境を提供できる。